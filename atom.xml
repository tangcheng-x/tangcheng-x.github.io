<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kevin's Blog]]></title>
  <link href="http://tangcheng-x.github.io/atom.xml" rel="self"/>
  <link href="http://tangcheng-x.github.io/"/>
  <updated>2013-10-14T01:05:58+08:00</updated>
  <id>http://tangcheng-x.github.io/</id>
  <author>
    <name><![CDATA[Kevin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rubik's Magic问题解答]]></title>
    <link href="http://tangcheng-x.github.io/blog/2013/10/13/rubiks-magic/"/>
    <updated>2013-10-13T23:12:00+08:00</updated>
    <id>http://tangcheng-x.github.io/blog/2013/10/13/rubiks-magic</id>
    <content type="html"><![CDATA[<p>最近上算法课，在<a href="http://soj.me/index.php">中大sicily</a>上面有3道魔板题<a href="http://soj.me/1150">1150.简单魔板</a>，<a href="http://soj.me/1151">1151.魔板</a>，和<a href="http://soj.me/1515">1515.魔板C</a>。为了方便讲解，我现将1150题目抄录下来:</p>

<h4>题目描述</h4>

<p>魔板是由8个大小相同的方块组成，分别涂上不同的颜色，用1到8的数字表示其初始状态是</p>

<p><code>
1 2 3 4<br />
8 7 6 5
</code></p>

<p>对模板可进行三种基本操作：</p>

<ul>
<li>A操作(上下行互换)</li>
</ul>


<p><code>
8 7 6 5<br />
1 2 3 4
</code></p>

<ul>
<li>B操作(每次以行循环右移一个)</li>
</ul>


<p><code>
4 1 2 3<br />
5 8 7 6
</code></p>

<ul>
<li>C操作(中间四小块顺时针转一格)</li>
</ul>


<p><code>
1 7 2 4<br />
8 6 3 5
</code></p>

<p>用上述三种基本操作，可将任意一种状态转换为另一种状态。</p>

<h4>输入</h4>

<p>输入包括多个要求解的魔板，每个魔板用三行描述。<br />
第一行步数N（不超过10的整数），表示最多容许的步数。<br />
第二、第三行表示目标状态，按照魔板的形状，颜色用1到8的表示。<br />
当N等于-1的时候，表示输入结束<br /></p>

<h3>输出</h3>

<p>对于每一个要求解的魔板，输出一行。<br />
首先是一个整数M，表示你找到解答所需要的步数。接着若干个空格之后，从第一步开始按顺序给出M步操作（每一步是A、B或C），相邻两个操作之间没有任何空格。<br />
注意：如果不能达到，则M输出-1即可。</p>

<h4>样例输入</h4>

<p><code>
4<br />
5 8 7 6<br />
4 1 2 3<br />
3<br />
8 7 6 5<br />
1 2 3 4<br />
-1
</code></p>

<h4>样例输出</h4>

<p><code>
2 AB<br />
1 A
</code></p>

<p>这道题如果单纯从解题的要求上看，不是很难。利用广度优先遍历可以解决这个问题。但是需要进行简单的剪枝，那么下面介绍一下具体的算法设计的过程</p>

<h3>算法的整体设计</h3>

<p>因为要在限制的步数内找到合理的操作使得模板满足输入中的那些形式，所以可以使用广度优先遍历，那么首先，我们对初始的模板(初始操作X)进行三种操作:A, B, C:</p>

<h4>第一次</h4>

<p><code>
A 操作： X->XA<br />
B 操作： X->XB<br />
C 操作： X->XC
</code></p>

<p>完成三个操作之后得到三个不同的状态 XA， XB， XC，下面分别对这三个状态再次进行A，B，C三种操作</p>

<h4>第二次</h4>

<p><code>
对XA操作<br />
A 操作：XA->XAA(这个需要忽略，因为两次连续的A操作相当与没有进行操作)<br />
B 操作：XA->XAB<br />
C 操作：XA->XAC<br />
</code></p>

<p><code>
对XB操作<br />
A 操作：XB->XBA(这个需要忽略，XAB和XBA得到的最终状态是一样的)<br />
B 操作：XB->XBB<br />
C 操作：XB->XBC<br />
</code></p>

<p><code>
对XC操作<br />
A 操作：XC->XCA<br />
B 操作：XC->XCB<br />
C 操作：XC->XCC<br />
</code></p>

<h3>&hellip;</h3>

<p>经过若干次之后，如果给出的目标魔板状态可以达到，那么会得到一个拥有最少操作步骤的解。那么我们程序的整体的算法就解释清楚了，现在
进行具体的数据结构和算法的设计。</p>

<h3>数据结构和算法设计</h3>

<p>由上面的分析可知，我们需要记录每次进行操作之后的状态和达到这个状态所进行的所有的操作，我设计一个结构体来存储这两种元素</p>

<pre><code>struct node {
    string str;
    string ops;
};
</code></pre>

<p>然后我们需要定义三种变换，这三种变换的函数定义如下：</p>

<pre><code>//A operation
string operationA(string str) {
    string temp = str;
    temp[0] = str[4];
    temp[1] = str[5];
    temp[2] = str[6];
    temp[3] = str[7];
    temp[4] = str[0];
    temp[5] = str[1];
    temp[6] = str[2];
    temp[7] = str[3];
    return temp;
}

// B operation
string operationB(string str) {
    string temp = str;
    temp[0] = str[3];
    temp[1] = str[0];
    temp[2] = str[1];
    temp[3] = str[2];
    temp[4] = str[7];
    temp[5] = str[4];
    temp[6] = str[5];
    temp[7] = str[6];
    return temp;
}

// C operation
string operationC(string str) {
    string temp = str;
    temp[1] = str[5];
    temp[2] = str[1];
    temp[6] = str[2];
    temp[5] = str[6];
    return temp;
}
</code></pre>

<p>现在，就要进行过程演绎了。首先，为了方便进行判定状态的重复性，我利用一个容器来存储魔板状态</p>

<pre><code>vector&lt;string&gt; states;
</code></pre>

<p>然后我需要将每次生成的新的状态的状态信息和操作信息存到一个新的node里面，然后将node放到一个容器中，这里我选择的容器为队列，因为队列有个特性是每次都将最先一个push进去的置为top，所以这样我可以依次将node取出来进行三种操作，并且可以保证每次取的都是最早放进去的。</p>

<pre><code>queue&lt;node&gt; nodes;
</code></pre>

<p>查看新的状态(不是目标状态)是否之前已经生成过了，如果没有生成过，那么就将状态和存储状态＆操作的节点分别存入states和nodes中</p>

<pre><code>void findAndPush(node&amp; newNode, queue&lt;node&gt;&amp; nodes, vector&lt;string&gt;&amp; states) {
    if (find(states.begin(), states.end(), newNode.str) == states.end()) {
        states.push_back(newNode.str);
        nodes.push(newNode);
    }   
}
</code></pre>

<p>下面是主要的处理函数</p>

<pre><code>node process(const node&amp; org, queue&lt;node&gt;&amp; nodes, vector&lt;string&gt;&amp; states) {
    if (org.str == target)
        return org;
    nodes.push(org);
    states.push_back(org.str);

    while (!nodes.empty()) {
        node curNode = nodes.front();
        nodes.pop();

        if (curNode.ops.length() &gt;= N)
            break;
        string changes[3];
        changes[0] = operationA(curNode.str);
        changes[1] = operationB(curNode.str);
        changes[2] = operationC(curNode.str);

        for (int i = 0; i != 3; i++) {
            node newNode;
            newNode.ops = curNode.ops + ops[i];
            newNode.str = changes[i];

            if (target == newNode.str)
                return newNode;
            findAndPush(newNode, nodes, states);
        }
    }
    node notFound;
    notFound.ops = "error";
    return notFound;
}
</code></pre>

<p>当然，这个版本实现是比较简单的，并且效率不高，可以优化的地方在于查找相同状态和状态的表示方法，这都需要进一步的改进，在后面的博客中会进行说明。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一道有意思的union问题]]></title>
    <link href="http://tangcheng-x.github.io/blog/2013/10/12/cplusplusunion/"/>
    <updated>2013-10-12T02:23:00+08:00</updated>
    <id>http://tangcheng-x.github.io/blog/2013/10/12/cplusplusunion</id>
    <content type="html"><![CDATA[<h2>一道简单的C++ union的问题</h2>

<pre><code>#include &lt;iostream&gt;
using namespace std;

union A {
    int t;
    char s[2];
};

int main() {
    A a;
    a.t = 0;
    a.s[0] = 1;
    a.s[1] = 2;
    cout &lt;&lt; a.t &lt;&lt; endl;
    return 0;
}
</code></pre>

<p>这个问题很简单，就是让我们回答输出的a.t是多少。问题虽然很小，但是却反映了C++中的两个重要的知识点：union和数据类型</p>

<h2>C++ 中的union</h2>

<p>我们知道，union是一种特殊的class,同时也是一种构造类型的数据结构，其中声明的所有的成员共享同一块内存。因此，一个union的变量的长度就是等于其声明的成员中最长的长度。如下面的例子所示：</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;

union M {
    char a;
    int b;
    double c;
};

int main() {
    M m;
    cout &lt;&lt; sizeof(m) &lt;&lt; endl;
    return 0;
}
</code></pre>

<p>我们可以看到，上面的代码执行之后得到的结果是 8(这里的单位是byte)，然后我们将注释掉 &lsquo;double c&rsquo;, 运行之后得到的结果是 4。实验的结果正如上文所说的一个union的变量的长度就是等于其声明的成员中最长的长度。那么原始的问题中定义的union A的大小是多少呢？由于 char s[2]的大小是2，而int的大小是4，那么显然，在main函数的变量 a 的大小就是4.</p>

<h2>整数的表示</h2>

<p>如果说这道题只是单纯地进行union的分析，那么它的价值就不会很大了，这道题的另一个知识点就是整数的表示。
大家都知道数据在计算机中是按字节来存储的(1byte = 8bits)，而计算机只能识别0和1这两个数。这样，1个字节能表示256种不同的信息(2<sup>8</sup> = 256)。比如我们要定一个1字节的无符号整数</p>

<pre><code>unsigned char a;</code></pre>


<p>那么a就能表示在[0,255]区间内的数，比如说我现在设定<code>a = 17</code>那么在计算机中，a就表示为00010001。而计算机中无符号数就是按照这个书的本身的二进制码来存储的。但是别急，这只是无符号整数的表示，而下面有符号的整数就不是这么简单了。</p>

<h3>有符号整数的表示</h3>

<p>从上文我们可以知道无符号数的表示直接以原码的形式展现出来，但是一旦一个数是负数的时候该如何表示呢？如果是书面的去写负数，很简
单，正数前面加一个<code>&ndash;</code>就可以了，但是我们却不能在计算机中这么做(只能识别1和0的计算机君表示根本不知道这是什么玩意
儿)，那么就引入了这样的一种表示方法，那就是最高位作为符号位，如果第一位是0则表示正数，第一位是1就表示负数，这样的话，对于一个
8位的二进制来说，表示数值的只有7位了，那么表示有符号整数的正数范围是[1, 127], 负数的范围就是[-127, -1]，当然，还有0，但是
我们看到一个问题，那就是当我们表示-127的时候，二进制表示为11111111，这和无符号数里面的255是一样的，那么具体是表示-1还是
255，就需要我们人为来指定了。而在计算机中，真正用来表示有符号数的是补码。这里我们需要了解：原码，反码，补码。
对于正数，原码/反码／补码都是其原码本身；但是负数的反码是除去符号位之外的所有位取反，而补码是反码加一。
上述的内容大家可能觉得知其然，但是为什么有符号整数需要用补码来表示呢？
我们首先看看如果用原码来表示有符号数有什么不合逻辑的地方，让我们来表示+0和-0。
+0: 00000000
-0: 10000000
反码表示+0和-0
+0: 00000000
-0: 11111111
上述的两种表示中，+0和-0的表示不是一样的，这样就有违背我们数学上关于0的意义。下面，我们看看补码是如何表示+0和-0的
+0: 00000000
-0: 00000000
哈，两种表示是一样的，那么自然我们采取补码来表示有符号整数，其实非负数的表示范围是00000000～01111111，而负数的表示范围是
11111111～10000000，记住了，10000000不是表示0的，是表示-128。所以这样一来，补码表示就比原码和反码表示的范围都大，并且
也解释了为什么计算机中有符号整数的范围是非对称的^&ndash;^</p>

<h2>程序的结果</h2>

<p>根据上述的关于union和有符号整数的分析，我们可以知道程序的输出了。简单地演算一下吧</p>

<pre><code>
a.t = 0;    //00000000 00000000 00000000 00000000
a.s[0] = 1; //00000000 00000000 00000000 00000001
a.s[1] = 2; //00000000 00000000 00000010 00000001
</code></pre>


<p>结果就是 2<sup>7</sup> + 2<sup>0</sup> = 513</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu12.04安装amd显卡驱动]]></title>
    <link href="http://tangcheng-x.github.io/blog/2013/10/12/helloworld/"/>
    <updated>2013-10-12T02:02:00+08:00</updated>
    <id>http://tangcheng-x.github.io/blog/2013/10/12/helloworld</id>
    <content type="html"><![CDATA[<h2>ubuntu12.04安装amd显卡驱动</h2>

<p>参考<a href="http://forum.ubuntu.org.cn/viewtopic.php?f=42&amp;t=439130">文章</a>, 其中对于一些小问题进行了改善</p>

<p>我的机器的配置是：</p>

<ul>
<li>CPU:  i5-4430</li>
<li>GPU:  HD7850</li>
<li>OS:   ubuntu12.04_64</li>
</ul>


<blockquote><p>根据显卡型号来下载特定的显卡驱动，其实可以用开源的显卡驱动，但是对于AMD来说，闭源的显卡驱动比开源的要好，所以我们就直接在AMD<a href="http://support.amd.com/cn/Pages/AMDSupportHub.aspx">官网</a>上下载就行</p></blockquote>

<h4>卸载已有的驱动(如果没有，可以无视这个步骤)</h4>

<pre><code>
sudo sh /usr/share/ati/fglrx-uninstall.sh
sudo apt-get remove --purge fglrx fglrx_* fglrx-amdcccle* fglrx-dev*
sudo apt-get remove --purge xorg-driver-fglrx xserver-xorg-video-ati xserver-xorg-video-radeon
</code></pre>


<h3>更新源</h3>

<pre><code>
sudo apt-get update
</pre>


<p></code></p>

<h3>安装打包支持环境</h3>

<pre><code>
sudo apt-get install dpkg build-essential cdbs dh-make dkms execstack dh-modaliases fakeroot libqtgui4 dpkg-dev

sudo apt-get install build-essential cdbs fakeroot dh-make debhelper debconf libstdc++6 dkms libqtgui4 wget execstack libelfg0 dh-modaliases
</pre>


<p></code></p>

<h3>安装ia32位库</h3>

<pre><code>
sudo apt-get install ia32-libs
sudo apt-get install ia32-libs-multiarch:i386 lib32gcc1 libc6-i386
</pre>


<p></code></p>

<h3>解压下载下来的驱动，然后进入安装目录，执行：</h3>

<pre><code>
sudo chmod +x amd-driver-installer-catalyst-13-4-x86.x86_64.run

sudo sh ./amd-driver-installer-catalyst-13-4-x86.x86_64.run --buildpkg Ubuntu/raring
</pre>


<p></code>
这会生成三个文件：fglrx_12.104-0ubuntu1_amd64.deb， fglrx-amdcccle_12.104-0ubuntu1_amd64.deb，fglrx-dev_12.104-0ubuntu1_amd64.deb</p>

<h3>安装打包好的deb文件</h3>

<pre><code>
sudo dpkg -i fglrx*.deb
</code></pre>


<h3>重启</h3>

<p>在上述命令完成之后，重启电脑，发现电脑竟然不能全屏，这让我很是纠结，上网找了N多资料，最终搞定了。
若是遇到非全屏的问题，执行：</p>

<pre><code>
sudo amdconfig --set-pcs-val=MCIL,DigitalHDTVDefaultUnderscan,0
sudo reboot
</code></pre>


<p>这中间如果出现关于config文件找不到的问题，需要init一下config文件，不过错误提示中会指导你怎么做，所以不必担心。</p>

<p>重启之后发现完全OK啦，好吧，这个问题也就搞定了。</p>
]]></content>
  </entry>
  
</feed>
