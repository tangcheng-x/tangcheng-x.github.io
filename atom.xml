<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kevin's Blog]]></title>
  <link href="http://tangcheng-x.github.io/atom.xml" rel="self"/>
  <link href="http://tangcheng-x.github.io/"/>
  <updated>2013-10-13T20:31:48+08:00</updated>
  <id>http://tangcheng-x.github.io/</id>
  <author>
    <name><![CDATA[Kevin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一道有意思的union问题]]></title>
    <link href="http://tangcheng-x.github.io/blog/2013/10/12/cplusplusunion/"/>
    <updated>2013-10-12T02:23:00+08:00</updated>
    <id>http://tangcheng-x.github.io/blog/2013/10/12/cplusplusunion</id>
    <content type="html"><![CDATA[<h2>一道简单的C++ union的问题</h2>

<pre><code>#include &lt;iostream&gt;
using namespace std;

union A {
    int t;
    char s[2];
};

int main() {
    A a;
    a.t = 0;
    a.s[0] = 1;
    a.s[1] = 2;
    cout &lt;&lt; a.t &lt;&lt; endl;
    return 0;
}
</code></pre>

<p>这个问题很简单，就是让我们回答输出的a.t是多少。问题虽然很小，但是却反映了C++中的两个重要的知识点：union和数据类型</p>

<h2>C++ 中的union</h2>

<p>我们知道，union是一种特殊的class,同时也是一种构造类型的数据结构，其中声明的所有的成员共享同一块内存。因此，一个union的变量的长度就是等于其声明的成员中最长的长度。如下面的例子所示：</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;

union M {
    char a;
    int b;
    double c;
};

int main() {
    M m;
    cout &lt;&lt; sizeof(m) &lt;&lt; endl;
    return 0;
}
</code></pre>

<p>我们可以看到，上面的代码执行之后得到的结果是 8(这里的单位是byte)，然后我们将注释掉 &lsquo;double c&rsquo;, 运行之后得到的结果是 4。实验的结果正如上文所说的一个union的变量的长度就是等于其声明的成员中最长的长度。那么原始的问题中定义的union A的大小是多少呢？由于 char s[2]的大小是2，而int的大小是4，那么显然，在main函数的变量 a 的大小就是4.</p>

<h2>整数的表示</h2>

<p>如果说这道题只是单纯地进行union的分析，那么它的价值就不会很大了，这道题的另一个知识点就是整数的表示。
大家都知道数据在计算机中是按字节来存储的(1byte = 8bits)，而计算机只能识别0和1这两个数。这样，1个字节能表示256种不同的信息(2<sup>8</sup> = 256)。比如我们要定一个1字节的无符号整数</p>

<pre><code>unsigned char a;</code></pre>


<p>那么a就能表示在[0,255]区间内的数，比如说我现在设定<code>a = 17</code>那么在计算机中，a就表示为00010001。而计算机中无符号数就是按照这个书的本身的二进制码来存储的。但是别急，这只是无符号整数的表示，而下面有符号的整数就不是这么简单了。</p>

<h3>有符号整数的表示</h3>

<p>从上文我们可以知道无符号数的表示直接以原码的形式展现出来，但是一旦一个数是负数的时候该如何表示呢？如果是书面的去写负数，很简
单，正数前面加一个<code>&ndash;</code>就可以了，但是我们却不能在计算机中这么做(只能识别1和0的计算机君表示根本不知道这是什么玩意
儿)，那么就引入了这样的一种表示方法，那就是最高位作为符号位，如果第一位是0则表示正数，第一位是1就表示负数，这样的话，对于一个
8位的二进制来说，表示数值的只有7位了，那么表示有符号整数的正数范围是[1, 127], 负数的范围就是[-127, -1]，当然，还有0，但是
我们看到一个问题，那就是当我们表示-127的时候，二进制表示为11111111，这和无符号数里面的255是一样的，那么具体是表示-1还是
255，就需要我们人为来指定了。而在计算机中，真正用来表示有符号数的是补码。这里我们需要了解：原码，反码，补码。
对于正数，原码/反码／补码都是其原码本身；但是负数的反码是除去符号位之外的所有位取反，而补码是反码加一。
上述的内容大家可能觉得知其然，但是为什么有符号整数需要用补码来表示呢？
我们首先看看如果用原码来表示有符号数有什么不合逻辑的地方，让我们来表示+0和-0。
+0: 00000000
-0: 10000000
反码表示+0和-0
+0: 00000000
-0: 11111111
上述的两种表示中，+0和-0的表示不是一样的，这样就有违背我们数学上关于0的意义。下面，我们看看补码是如何表示+0和-0的
+0: 00000000
-0: 00000000
哈，两种表示是一样的，那么自然我们采取补码来表示有符号整数，其实非负数的表示范围是00000000～01111111，而负数的表示范围是
11111111～10000000，记住了，10000000不是表示0的，是表示-128。所以这样一来，补码表示就比原码和反码表示的范围都大，并且
也解释了为什么计算机中有符号整数的范围是非对称的^&ndash;^</p>

<h2>程序的结果</h2>

<p>根据上述的关于union和有符号整数的分析，我们可以知道程序的输出了。简单地演算一下吧</p>

<pre><code>
a.t = 0;    //00000000 00000000 00000000 00000000
a.s[0] = 1; //00000000 00000000 00000000 00000001
a.s[1] = 2; //00000000 00000000 00000010 00000001
</code></pre>


<p>结果就是 2<sup>7</sup> + 2<sup>0</sup> = 513</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu12.04安装amd显卡驱动]]></title>
    <link href="http://tangcheng-x.github.io/blog/2013/10/12/helloworld/"/>
    <updated>2013-10-12T02:02:00+08:00</updated>
    <id>http://tangcheng-x.github.io/blog/2013/10/12/helloworld</id>
    <content type="html"><![CDATA[<h2>ubuntu12.04安装amd显卡驱动</h2>

<p>参考<a href="http://forum.ubuntu.org.cn/viewtopic.php?f=42&amp;t=439130">文章</a>, 其中对于一些小问题进行了改善</p>

<p>我的机器的配置是：</p>

<ul>
<li>CPU:  i5-4430</li>
<li>GPU:  HD7850</li>
<li>OS:   ubuntu12.04_64</li>
</ul>


<blockquote><p>根据显卡型号来下载特定的显卡驱动，其实可以用开源的显卡驱动，但是对于AMD来说，闭源的显卡驱动比开源的要好，所以我们就直接在AMD<a href="http://support.amd.com/cn/Pages/AMDSupportHub.aspx">官网</a>上下载就行</p></blockquote>

<h4>卸载已有的驱动(如果没有，可以无视这个步骤)</h4>

<pre><code>
sudo sh /usr/share/ati/fglrx-uninstall.sh
sudo apt-get remove --purge fglrx fglrx_* fglrx-amdcccle* fglrx-dev*
sudo apt-get remove --purge xorg-driver-fglrx xserver-xorg-video-ati xserver-xorg-video-radeon
</code></pre>


<h3>更新源</h3>

<pre><code>
sudo apt-get update
</pre>


<p></code></p>

<h3>安装打包支持环境</h3>

<pre><code>
sudo apt-get install dpkg build-essential cdbs dh-make dkms execstack dh-modaliases fakeroot libqtgui4 dpkg-dev

sudo apt-get install build-essential cdbs fakeroot dh-make debhelper debconf libstdc++6 dkms libqtgui4 wget execstack libelfg0 dh-modaliases
</pre>


<p></code></p>

<h3>安装ia32位库</h3>

<pre><code>
sudo apt-get install ia32-libs
sudo apt-get install ia32-libs-multiarch:i386 lib32gcc1 libc6-i386
</pre>


<p></code></p>

<h3>解压下载下来的驱动，然后进入安装目录，执行：</h3>

<pre><code>
sudo chmod +x amd-driver-installer-catalyst-13-4-x86.x86_64.run

sudo sh ./amd-driver-installer-catalyst-13-4-x86.x86_64.run --buildpkg Ubuntu/raring
</pre>


<p></code>
这会生成三个文件：fglrx_12.104-0ubuntu1_amd64.deb， fglrx-amdcccle_12.104-0ubuntu1_amd64.deb，fglrx-dev_12.104-0ubuntu1_amd64.deb</p>

<h3>安装打包好的deb文件</h3>

<pre><code>
sudo dpkg -i fglrx*.deb
</code></pre>


<h3>重启</h3>

<p>在上述命令完成之后，重启电脑，发现电脑竟然不能全屏，这让我很是纠结，上网找了N多资料，最终搞定了。
若是遇到非全屏的问题，执行：</p>

<pre><code>
sudo amdconfig --set-pcs-val=MCIL,DigitalHDTVDefaultUnderscan,0
sudo reboot
</code></pre>


<p>这中间如果出现关于config文件找不到的问题，需要init一下config文件，不过错误提示中会指导你怎么做，所以不必担心。</p>

<p>重启之后发现完全OK啦，好吧，这个问题也就搞定了。</p>
]]></content>
  </entry>
  
</feed>
